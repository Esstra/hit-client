// 
// This file has been auto-generated by Esstra.Hit.Client.CodeGen.
// 
namespace Esstra.Hit.Client.Entities
{
    using Esstra.Hit.Client.Annotations;

    using System;
    using System.ComponentModel.DataAnnotations;
    using System.Text.Json.Serialization;

    /// <summary>
    /// CC-Kontrolle Bereich 3 Tierschutz - Haltung Kälber (Sicht auf Geschwister)
    /// </summary>
    [Entity("CC_TKA_BP")]
    public class CC_TKA_BP
    {
        /// <summary>
        /// Gets or sets the value of "Hinweis auf Verstoß Bereich 1 Umwelt - ELER Phosphat".
        /// </summary>
        [Column("CROS_ELP")]
        [Required]
        public bool? CROS_ELP { get; set; }

        /// <summary>
        /// Gets or sets the value of "Cross-Check Bemerkung im Teil B (Fortsetzung)".
        /// </summary>
        /// <remarks>
        /// Ausführungen zu den Feststellungen / Hinweisen, zu festgestellten Verstößen oder Hinweise
        /// </remarks>
        [Column("CROS_BEMB2")]
        public string? CROS_BEMB2 { get; set; }

        /// <summary>
        /// Gets or sets the value of "Kontrolle ohne Beisein des Betriebsinhabers oder eines Vertreters".
        /// </summary>
        /// <remarks>
        /// Wurde Vor-Ort-Kontrolle ohne Beisein des Betriebsinhabers oder eines Vertreters durchgeführt
        /// </remarks>
        [Column("VOK_OB")]
        [Required]
        public bool? VOK_OB { get; set; }

        /// <summary>
        /// Gets the value of "Auswahlgrund".
        /// </summary>
        /// <remarks>
        /// Grund für Auswahl zur Vor-Ort-Kontrolle
        /// </remarks>
        [Column("AUSW_GRND")]
        public int? AUSW_GRND { get; set; }

        /// <summary>
        /// Gets the value of "Betriebsnummer".
        /// </summary>
        /// <remarks>
        /// Registriernummer für Betrieb, Langform mit B.Land und Staat
        /// </remarks>
        [Column("BNR15")]
        public decimal? BNR15 { get; set; }

        /// <summary>
        /// Gets the value of "Fachbehörde für Cross-Check".
        /// </summary>
        /// <remarks>
        /// Registriernummer der zuständigen Fachbehörde
        /// </remarks>
        [Column("BNR15_BCRO")]
        public decimal? BNR15_BCRO { get; set; }

        /// <summary>
        /// Gets the value of "Child-Betrieb".
        /// </summary>
        /// <remarks>
        /// Abhängiger Betrieb bei Zuordnung
        /// </remarks>
        [Column("BNR15_C")]
        public decimal? BNR15_C { get; set; }

        /// <summary>
        /// Gets the value of "Parent-Betrieb, aus der 1.Zuordnung".
        /// </summary>
        /// <remarks>
        /// übergeordneter Betrieb auf 1.Hierarchiestufe, TYP_ZUO i.d.R. 1, 5 oder 16
        /// </remarks>
        [Column("BNR15_P1")]
        public decimal? BNR15_P1 { get; set; }

        /// <summary>
        /// Gets the value of "Parent-Betrieb, aus der 2.Zuordnung".
        /// </summary>
        /// <remarks>
        /// übergeordneter Betrieb auf 2.Hierarchiestufe, TYP_ZUO i.d.R. 5 oder 16
        /// </remarks>
        [Column("BNR15_P2")]
        public decimal? BNR15_P2 { get; set; }

        /// <summary>
        /// Gets the value of "Parent-Betrieb, aus der 3.Zuordnung".
        /// </summary>
        /// <remarks>
        /// übergeordneter Betrieb auf 3.Hierarchiestufe, TYP_ZUO i.d.R. 16
        /// </remarks>
        [Column("BNR15_P3")]
        public decimal? BNR15_P3 { get; set; }

        /// <summary>
        /// Gets the value of "Prüfbehörde für Cross-Compliance".
        /// </summary>
        /// <remarks>
        /// Registriernummer der zuständigen Prüfbehörde
        /// </remarks>
        [Column("BNR15_PBCC")]
        public decimal? BNR15_PBCC { get; set; }

        /// <summary>
        /// Gets the value of "Betriebsnummer des Unternehmens für Cross-Compliance".
        /// </summary>
        /// <remarks>
        /// Antragsteller-Registriernummer
        /// </remarks>
        [Column("BNR15_UNCC")]
        public decimal? BNR15_UNCC { get; set; }

        /// <summary>
        /// Gets the value of "Betriebszuordnungseinheit des Childs".
        /// </summary>
        /// <remarks>
        /// Angabe ob BS, VVVO-UN, IVK-UN oder PERS.
        /// </remarks>
        [Column("BZUO_EIN_C")]
        public int? BZUO_EIN_C { get; set; }

        /// <summary>
        /// Gets the value of "Betriebszuordnungseinheit des Parents".
        /// </summary>
        /// <remarks>
        /// Angabe ob BS, VVVO-UN, IVK-UN oder PERS.
        /// </remarks>
        [Column("BZUO_EIN_P")]
        public int? BZUO_EIN_P { get; set; }

        /// <summary>
        /// Gets the value of "CC Bemerkung im Teil F".
        /// </summary>
        /// <remarks>
        /// Ausführungen zu Bewertung, Bagatelle und Follow-Up
        /// </remarks>
        [Column("CC_BEM_F")]
        public string? CC_BEM_F { get; set; }

        /// <summary>
        /// Gets the value of "Datum der Durchführung des Follow up".
        /// </summary>
        [Column("CC_FOL_DAT")]
        public DateOnly? CC_FOL_DAT { get; set; }

        /// <summary>
        /// Gets the value of "Follow up Status".
        /// </summary>
        /// <remarks>
        /// Angabe ob Follow up erforderlich und ggf. durchgeführt
        /// </remarks>
        [Column("CC_FOL_UP")]
        public int? CC_FOL_UP { get; set; }

        /// <summary>
        /// Gets the value of "Welche Teile fehlen noch, bzw. wie weit fertig".
        /// </summary>
        /// <remarks>
        /// Angaben welche Teile der Eingabe noch fehlen, bzw. wie weit fertig
        /// </remarks>
        [Column("CC_MISSING")]
        public int? CC_MISSING { get; set; }

        /// <summary>
        /// Gets the value of "Cross-Check Bemerkung im Teil B".
        /// </summary>
        /// <remarks>
        /// Ausführungen zu den Feststellungen / Hinweisen, zu festgestellten Verstößen oder Hinweise
        /// </remarks>
        [Column("CROS_BEM_B")]
        public string? CROS_BEM_B { get; set; }

        /// <summary>
        /// Gets the value of "Cross-Check Bemerkung im Teil H".
        /// </summary>
        /// <remarks>
        /// Ausführungen zu den Feststellungen / Hinweisen, als Mitteilung für andere Behörde
        /// </remarks>
        [Column("CROS_BEM_H")]
        public string? CROS_BEM_H { get; set; }

        /// <summary>
        /// Gets the value of "Datum der Information der zuständigen Fachbehörde".
        /// </summary>
        /// <remarks>
        /// Mitteilung über Hinweise auf Verstoß gegen anderw. Verpflichtungen, außerhalb eigener Zuständigkeit
        /// </remarks>
        [Column("CROS_INDAT")]
        public DateOnly? CROS_INDAT { get; set; }

        /// <summary>
        /// Gets the value of "Hinweis auf Verstoß in einem anderen Bereich".
        /// </summary>
        [Column("CROS_JN")]
        public bool? CROS_JN { get; set; }

        /// <summary>
        /// Gets the value of "Hinweis auf Verstoß Bereich 1 Umwelt - FFH".
        /// </summary>
        [Column("CROS_UFF")]
        public bool? CROS_UFF { get; set; }

        /// <summary>
        /// Gets the value of "Hinweis auf Verstoß Bereich 1 Umwelt - Grundwasser".
        /// </summary>
        [Column("CROS_UGR")]
        public bool? CROS_UGR { get; set; }

        /// <summary>
        /// Gets the value of "Hinweis auf Verstoß Bereich 1 Umwelt - Klärschlamm".
        /// </summary>
        [Column("CROS_UKS")]
        public bool? CROS_UKS { get; set; }

        /// <summary>
        /// Gets the value of "Hinweis auf Verstoß Bereich 1 Umwelt - Nitrat".
        /// </summary>
        [Column("CROS_UNI")]
        public bool? CROS_UNI { get; set; }

        /// <summary>
        /// Gets the value of "Hinweis auf Verstoß Bereich 1 Umwelt - Vogelschutz".
        /// </summary>
        [Column("CROS_UVO")]
        public bool? CROS_UVO { get; set; }

        /// <summary>
        /// Gets the value of "Hinweis auf Verstoß Bereich 2 Gesundheit - Futtermittel".
        /// </summary>
        [Column("CROS_VFM")]
        public bool? CROS_VFM { get; set; }

        /// <summary>
        /// Gets the value of "Hinweis auf Verstoß Bereich 2 Gesundheit - Hormonrichtlinie / Mitteilung".
        /// </summary>
        [Column("CROS_VHO")]
        public bool? CROS_VHO { get; set; }

        /// <summary>
        /// Gets the value of "Hinweis auf Verstoß Bereich 2 Gesundheit - Lebensmittel pflanzlicher/tierischer Herkunft".
        /// </summary>
        [Column("CROS_VLP")]
        public bool? CROS_VLP { get; set; }

        /// <summary>
        /// Gets the value of "Hinweis auf Verstoß Bereich 2 Gesundheit - TSE".
        /// </summary>
        [Column("CROS_VLT")]
        public bool? CROS_VLT { get; set; }

        /// <summary>
        /// Gets the value of "Hinweis auf Verstoß Bereich 2 Gesundheit - Pflanzenschutzmittel".
        /// </summary>
        [Column("CROS_VPS")]
        public bool? CROS_VPS { get; set; }

        /// <summary>
        /// Gets the value of "Hinweis auf Verstoß Bereich 2 Gesundheit - Rinder".
        /// </summary>
        [Column("CROS_VRI")]
        public bool? CROS_VRI { get; set; }

        /// <summary>
        /// Gets the value of "Hinweis auf Verstoß Bereich 2 Gesundheit - Schweine".
        /// </summary>
        [Column("CROS_VSW")]
        public bool? CROS_VSW { get; set; }

        /// <summary>
        /// Gets the value of "Hinweis auf Verstoß Bereich 2 Gesundheit - Schafe und Ziegen".
        /// </summary>
        [Column("CROS_VSZ")]
        public bool? CROS_VSZ { get; set; }

        /// <summary>
        /// Gets the value of "Hinweis auf Verstoß Bereich 4 weiteres - Anhang IV".
        /// </summary>
        [Column("CROS_WA4")]
        public bool? CROS_WA4 { get; set; }

        /// <summary>
        /// Gets the value of "Zuordnung gültig bis".
        /// </summary>
        /// <remarks>
        /// fachlich gültig bis oder aktuell (31.12.2100)
        /// </remarks>
        [Column("DZUO_BIS")]
        public DateTime? DZUO_BIS { get; set; }

        /// <summary>
        /// Gets the value of "DZUO_BIS, aus der 1.Zuordnung".
        /// </summary>
        [Column("DZUO_BIS_1")]
        public DateTime? DZUO_BIS_1 { get; set; }

        /// <summary>
        /// Gets the value of "DZUO_BIS, aus der 2.Zuordnung oder Kollisionsmeldung".
        /// </summary>
        [Column("DZUO_BIS_2")]
        public DateTime? DZUO_BIS_2 { get; set; }

        /// <summary>
        /// Gets the value of "DZUO_BIS, aus der 3.Zuordnung".
        /// </summary>
        [Column("DZUO_BIS_3")]
        public DateTime? DZUO_BIS_3 { get; set; }

        /// <summary>
        /// Gets the value of "Zuordnung gültig von".
        /// </summary>
        /// <remarks>
        /// Timestamp ab wann der Satz fachlich gilt
        /// </remarks>
        [Column("DZUO_VON")]
        public DateTime? DZUO_VON { get; set; }

        /// <summary>
        /// Gets the value of "DZUO_VON, aus der 1.Zuordnung".
        /// </summary>
        [Column("DZUO_VON_1")]
        public DateTime? DZUO_VON_1 { get; set; }

        /// <summary>
        /// Gets the value of "DZUO_VON, aus der 2.Zuordnung oder Kollisionsmeldung".
        /// </summary>
        [Column("DZUO_VON_2")]
        public DateTime? DZUO_VON_2 { get; set; }

        /// <summary>
        /// Gets the value of "DZUO_VON, aus der 3.Zuordnung".
        /// </summary>
        [Column("DZUO_VON_3")]
        public DateTime? DZUO_VON_3 { get; set; }

        /// <summary>
        /// Gets the value of "Meldebetrieb".
        /// </summary>
        /// <remarks>
        /// Betriebsnummer die Meldung abgesetzt hat
        /// </remarks>
        [Column("MELD_BNR")]
        public decimal? MELD_BNR { get; set; }

        /// <summary>
        /// Gets the value of "Meldedatum".
        /// </summary>
        /// <remarks>
        /// Datum des Meldeeingang
        /// </remarks>
        [Column("MELD_DAT")]
        public DateOnly? MELD_DAT { get; set; }

        /// <summary>
        /// Gets the value of "Änderungsgrund".
        /// </summary>
        /// <remarks>
        /// Grund der Erfassung, Änderung oder Korrektur, insbesondere bei Kontrollberichten
        /// </remarks>
        [Column("MELD_GRND")]
        public int? MELD_GRND { get; set; }

        /// <summary>
        /// Gets the value of "Meldemitbenutzer".
        /// </summary>
        /// <remarks>
        /// Mitbenutzernummer die Meldung abgesetzt hat
        /// </remarks>
        [Column("MELD_MBN")]
        public int? MELD_MBN { get; set; }

        /// <summary>
        /// Gets the value of "Meldeweg".
        /// </summary>
        /// <remarks>
        /// Meldeweg (Post,IVR,IN...)
        /// </remarks>
        [Column("MELD_WG")]
        public int? MELD_WG { get; set; }

        /// <summary>
        /// Gets the value of "Jahr der Risikoanalyse (Kontrolljahr)".
        /// </summary>
        /// <remarks>
        /// Jahresangabe, vierstellig
        /// </remarks>
        [Column("RIS_JAHR")]
        public int? RIS_JAHR { get; set; }

        /// <summary>
        /// Gets the value of "Stornobetrieb".
        /// </summary>
        /// <remarks>
        /// Betriebsnummer die Meldung storniert hat
        /// </remarks>
        [Column("STRN_BNR")]
        public decimal? STRN_BNR { get; set; }

        /// <summary>
        /// Gets the value of "Änderungsgrund für Storno".
        /// </summary>
        /// <remarks>
        /// Grund des Storno, insbesondere bei Kontrollberichten
        /// </remarks>
        [Column("STRN_GRND")]
        public int? STRN_GRND { get; set; }

        /// <summary>
        /// Gets the value of "Stornomitbenutzer".
        /// </summary>
        /// <remarks>
        /// Mitbenutzernummer die Meldung storniert hat
        /// </remarks>
        [Column("STRN_MBN")]
        public int? STRN_MBN { get; set; }

        /// <summary>
        /// Gets the value of "storniert".
        /// </summary>
        /// <remarks>
        /// Storno-Zeitpunkt, ab wann die Information technisch nicht meht gültig ist
        /// </remarks>
        [Column("SYS_BIS")]
        public DateTime? SYS_BIS { get; set; }

        /// <summary>
        /// Gets the value of "storniert (Teil A)".
        /// </summary>
        /// <remarks>
        /// Storno-Zeitpunkt, ab wann die Information im Teil A technisch nicht meht gültig ist
        /// </remarks>
        [Column("SYS_BIS_A")]
        public DateTime? SYS_BIS_A { get; set; }

        /// <summary>
        /// Gets the value of "gespeichert".
        /// </summary>
        /// <remarks>
        /// Speichern-Zeitpunkt, ab wann die Information technisch gültig ist
        /// </remarks>
        [Column("SYS_VON")]
        public DateTime? SYS_VON { get; set; }

        /// <summary>
        /// Gets the value of "gespeichert (Teil A)".
        /// </summary>
        /// <remarks>
        /// Speichern-Zeitpunkt, ab wann die Information im Teil A technisch gültig ist
        /// </remarks>
        [Column("SYS_VON_A")]
        public DateTime? SYS_VON_A { get; set; }

        /// <summary>
        /// Gets the value of "Prüfer-Bewertung bei Verstoß gegen systemat. K21 Bewegungsmöglichkeit".
        /// </summary>
        /// <remarks>
        /// Bewegungsfreiheit (Kälber)
        /// </remarks>
        [Column("T_K21_PR")]
        public int? T_K21_PR { get; set; }

        /// <summary>
        /// Gets the value of "Regelverstoß gegen systemat. K21 Bewegungsmöglichkeit".
        /// </summary>
        [Column("T_K21_RE")]
        public int? T_K21_RE { get; set; }

        /// <summary>
        /// Gets the value of "Vorsatz bei Verstoß gegen systemat. K21 Bewegungsmöglichkeit".
        /// </summary>
        [Column("T_K21_VO")]
        public bool? T_K21_VO { get; set; }

        /// <summary>
        /// Gets the value of "Anzahl Kälber - K21 Bewegungsmöglichkeit (Bewegungsfreiheit RL91/629)".
        /// </summary>
        [Column("T_K21_Z_KA")]
        public int? T_K21_Z_KA { get; set; }

        /// <summary>
        /// Gets the value of "Prüfer-Bewertung bei Verstoß gegen systemat. K22 Anbindung, Zulässigkeit".
        /// </summary>
        /// <remarks>
        /// Bewegungsfreiheit (Kälber)
        /// </remarks>
        [Column("T_K22_PR")]
        public int? T_K22_PR { get; set; }

        /// <summary>
        /// Gets the value of "Regelverstoß gegen systemat. K22 Anbindung, Zulässigkeit".
        /// </summary>
        [Column("T_K22_RE")]
        public int? T_K22_RE { get; set; }

        /// <summary>
        /// Gets the value of "Vorsatz bei Verstoß gegen systemat. K22 Anbindung, Zulässigkeit".
        /// </summary>
        [Column("T_K22_VO")]
        public bool? T_K22_VO { get; set; }

        /// <summary>
        /// Gets the value of "Anzahl Kälber - K22 Anbindung, Zulässigkeit (Bewegungsfreiheit RL91/629)".
        /// </summary>
        [Column("T_K22_Z_KA")]
        public int? T_K22_Z_KA { get; set; }

        /// <summary>
        /// Gets the value of "Prüfer-Bewertung bei Verstoß gegen systemat. K23 Anbindung, Ausführung".
        /// </summary>
        /// <remarks>
        /// Bewegungsfreiheit (Kälber)
        /// </remarks>
        [Column("T_K23_PR")]
        public int? T_K23_PR { get; set; }

        /// <summary>
        /// Gets the value of "Regelverstoß gegen systemat. K23 Anbindung, Ausführung".
        /// </summary>
        [Column("T_K23_RE")]
        public int? T_K23_RE { get; set; }

        /// <summary>
        /// Gets the value of "Vorsatz bei Verstoß gegen systemat. K23 Anbindung, Ausführung".
        /// </summary>
        [Column("T_K23_VO")]
        public bool? T_K23_VO { get; set; }

        /// <summary>
        /// Gets the value of "Anzahl Kälber - K23 Anbindung, Ausführung (Bewegungsfreiheit RL91/629) -".
        /// </summary>
        [Column("T_K23_Z_KA")]
        public int? T_K23_Z_KA { get; set; }

        /// <summary>
        /// Gets the value of "Anzahl Kälber (Spalte A) - K24 Einzelhaltung, Buchtenmaße (Bewegungsfreiheit RL91/629)".
        /// </summary>
        [Column("T_K24_A_KA")]
        public int? T_K24_A_KA { get; set; }

        /// <summary>
        /// Gets the value of "Anzahl Kälber (Spalte B) - K24 Einzelhaltung, Buchtenmaße (Bewegungsfreiheit RL91/629)".
        /// </summary>
        [Column("T_K24_B_KA")]
        public int? T_K24_B_KA { get; set; }

        /// <summary>
        /// Gets the value of "Anzahl Kälber (Spalte C) - K24 Einzelhaltung, Buchtenmaße (Bewegungsfreiheit RL91/629)".
        /// </summary>
        [Column("T_K24_C_KA")]
        public int? T_K24_C_KA { get; set; }

        /// <summary>
        /// Gets the value of "Prüfer-Bewertung bei Verstoß gegen systemat. K24 Einzelhaltung, Buchtenmaße".
        /// </summary>
        /// <remarks>
        /// Bewegungsfreiheit (Kälber)
        /// </remarks>
        [Column("T_K24_PR")]
        public int? T_K24_PR { get; set; }

        /// <summary>
        /// Gets the value of "Regelverstoß gegen systemat. K24 Einzelhaltung, Buchtenmaße".
        /// </summary>
        [Column("T_K24_RE")]
        public int? T_K24_RE { get; set; }

        /// <summary>
        /// Gets the value of "Vorsatz bei Verstoß gegen systemat. K24 Einzelhaltung, Buchtenmaße".
        /// </summary>
        [Column("T_K24_VO")]
        public bool? T_K24_VO { get; set; }

        /// <summary>
        /// Gets the value of "Anzahl Kälber (Spalte A) - K25 Gruppenhaltung, Buchtenmaße (Bewegungsfreiheit RL91/629)".
        /// </summary>
        [Column("T_K25_A_KA")]
        public int? T_K25_A_KA { get; set; }

        /// <summary>
        /// Gets the value of "Anzahl Kälber (Spalte B) - K25 Gruppenhaltung, Buchtenmaße (Bewegungsfreiheit RL91/629)".
        /// </summary>
        [Column("T_K25_B_KA")]
        public int? T_K25_B_KA { get; set; }

        /// <summary>
        /// Gets the value of "Anzahl Kälber (Spalte C) - K25 Gruppenhaltung, Buchtenmaße (Bewegungsfreiheit RL91/629)".
        /// </summary>
        [Column("T_K25_C_KA")]
        public int? T_K25_C_KA { get; set; }

        /// <summary>
        /// Gets the value of "Prüfer-Bewertung bei Verstoß gegen systemat. K25 Gruppenhaltung, Buchtenmaße".
        /// </summary>
        /// <remarks>
        /// Bewegungsfreiheit (Kälber)
        /// </remarks>
        [Column("T_K25_PR")]
        public int? T_K25_PR { get; set; }

        /// <summary>
        /// Gets the value of "Regelverstoß gegen systemat. K25 Gruppenhaltung, Buchtenmaße".
        /// </summary>
        [Column("T_K25_RE")]
        public int? T_K25_RE { get; set; }

        /// <summary>
        /// Gets the value of "Vorsatz bei Verstoß gegen systemat. K25 Gruppenhaltung, Buchtenmaße".
        /// </summary>
        [Column("T_K25_VO")]
        public bool? T_K25_VO { get; set; }

        /// <summary>
        /// Gets the value of "Prüfer-Bewertung bei Verstoß gegen systemat. K26 Einzelhaltung, Zulässigkeit".
        /// </summary>
        /// <remarks>
        /// Bewegungsfreiheit (Kälber)
        /// </remarks>
        [Column("T_K26_PR")]
        public int? T_K26_PR { get; set; }

        /// <summary>
        /// Gets the value of "Regelverstoß gegen systemat. K26 Einzelhaltung, Zulässigkeit".
        /// </summary>
        [Column("T_K26_RE")]
        public int? T_K26_RE { get; set; }

        /// <summary>
        /// Gets the value of "Vorsatz bei Verstoß gegen systemat. K26 Einzelhaltung, Zulässigkeit".
        /// </summary>
        [Column("T_K26_VO")]
        public bool? T_K26_VO { get; set; }

        /// <summary>
        /// Gets the value of "Anzahl Kälber - K26 Einzelhaltung, Zulässigkeit (Bewegungsfreiheit RL91/629)".
        /// </summary>
        [Column("T_K26_Z_KA")]
        public int? T_K26_Z_KA { get; set; }

        /// <summary>
        /// Gets the value of "Prüfer-Bewertung bei Verstoß gegen systemat. K31 Beleuchtung, Dunkelheit, Gebäude/Weide".
        /// </summary>
        /// <remarks>
        /// Gebäude/Weide (Kälber)
        /// </remarks>
        [Column("T_K31_PR")]
        public int? T_K31_PR { get; set; }

        /// <summary>
        /// Gets the value of "Regelverstoß gegen systemat. K31 Beleuchtung, Dunkelheit, Gebäude/Weide".
        /// </summary>
        [Column("T_K31_RE")]
        public int? T_K31_RE { get; set; }

        /// <summary>
        /// Gets the value of "Vorsatz bei Verstoß gegen systemat. K31 Beleuchtung, Dunkelheit, Gebäude/Weide".
        /// </summary>
        [Column("T_K31_VO")]
        public bool? T_K31_VO { get; set; }

        /// <summary>
        /// Gets the value of "Anzahl Kälber - K31 Beleuchtung, Dunkelheit (Gebäude/Weide RL91/629)".
        /// </summary>
        [Column("T_K31_Z_KA")]
        public int? T_K31_Z_KA { get; set; }

        /// <summary>
        /// Gets the value of "Prüfer-Bewertung bei Verstoß gegen systemat. K32 Boden, Ausführung, Gebäude/Weide".
        /// </summary>
        /// <remarks>
        /// Gebäude/Weide (Kälber)
        /// </remarks>
        [Column("T_K32_PR")]
        public int? T_K32_PR { get; set; }

        /// <summary>
        /// Gets the value of "Regelverstoß gegen systemat. K32 Boden, Ausführung, Gebäude/Weide".
        /// </summary>
        [Column("T_K32_RE")]
        public int? T_K32_RE { get; set; }

        /// <summary>
        /// Gets the value of "Vorsatz bei Verstoß gegen systemat. K32 Boden, Ausführung, Gebäude/Weide".
        /// </summary>
        [Column("T_K32_VO")]
        public bool? T_K32_VO { get; set; }

        /// <summary>
        /// Gets the value of "Anzahl Kälber - K32 Boden, Ausführung (Gebäude/Weide RL91/629)".
        /// </summary>
        [Column("T_K32_Z_KA")]
        public int? T_K32_Z_KA { get; set; }

        /// <summary>
        /// Gets the value of "Prüfer-Bewertung bei Verstoß gegen systemat. K33 Liegebereich,Ausführung, Gebäude/Weide".
        /// </summary>
        /// <remarks>
        /// Gebäude/Weide (Kälber)
        /// </remarks>
        [Column("T_K33_PR")]
        public int? T_K33_PR { get; set; }

        /// <summary>
        /// Gets the value of "Regelverstoß gegen systemat. K33 Liegebereich, Ausführung, Gebäude/Weide".
        /// </summary>
        [Column("T_K33_RE")]
        public int? T_K33_RE { get; set; }

        /// <summary>
        /// Gets the value of "Vorsatz bei Verstoß gegen systemat. K33 Liegebereich, Ausführung, Gebäude/Weide".
        /// </summary>
        [Column("T_K33_VO")]
        public bool? T_K33_VO { get; set; }

        /// <summary>
        /// Gets the value of "Anzahl Kälber - K33 Liegebereich, Ausführung (Gebäude/Weide RL91/629)".
        /// </summary>
        [Column("T_K33_Z_KA")]
        public int? T_K33_Z_KA { get; set; }

        /// <summary>
        /// Gets the value of "Prüfer-Bewertung bei Verstoß gegen systemat. K34 Liegebereich, Einstreu, Gebäude/Weide".
        /// </summary>
        /// <remarks>
        /// Gebäude/Weide (Kälber)
        /// </remarks>
        [Column("T_K34_PR")]
        public int? T_K34_PR { get; set; }

        /// <summary>
        /// Gets the value of "Regelverstoß gegen systemat. K34 Liegebereich, Einstreu, Gebäude/Weide".
        /// </summary>
        [Column("T_K34_RE")]
        public int? T_K34_RE { get; set; }

        /// <summary>
        /// Gets the value of "Vorsatz bei Verstoß gegen systemat. K34 Liegebereich, Einstreu, Gebäude/Weide".
        /// </summary>
        [Column("T_K34_VO")]
        public bool? T_K34_VO { get; set; }

        /// <summary>
        /// Gets the value of "Anzahl Kälber - K34 Liegebereich, Einstreu (Gebäude/Weide RL91/629)".
        /// </summary>
        [Column("T_K34_Z_KA")]
        public int? T_K34_Z_KA { get; set; }

        /// <summary>
        /// Gets the value of "Prüfer-Bewertung bei Verstoß gegen systemat. K35 Einzelhaltung, Begrenzungen, Gebäude".
        /// </summary>
        /// <remarks>
        /// Gebäude/Weide (Kälber)
        /// </remarks>
        [Column("T_K35_PR")]
        public int? T_K35_PR { get; set; }

        /// <summary>
        /// Gets the value of "Regelverstoß gegen systemat. K35 Einzelhaltung, Begrenzungen, Gebäude".
        /// </summary>
        [Column("T_K35_RE")]
        public int? T_K35_RE { get; set; }

        /// <summary>
        /// Gets the value of "Vorsatz bei Verstoß gegen systemat. K35 Einzelhaltung, Begrenzungen, Gebäude".
        /// </summary>
        [Column("T_K35_VO")]
        public bool? T_K35_VO { get; set; }

        /// <summary>
        /// Gets the value of "Anzahl Kälber - K35 Einzelhaltung, Begrenzungen (Gebäude/Weide RL91/629)".
        /// </summary>
        [Column("T_K35_Z_KA")]
        public int? T_K35_Z_KA { get; set; }

        /// <summary>
        /// Gets the value of "Prüfer-Bewertung bei Verstoß gegen systemat. K51 Eisengehalt, Milch, Füttern".
        /// </summary>
        /// <remarks>
        /// Füttern, Tränken, beigefügte Stoffe (Kälber)
        /// </remarks>
        [Column("T_K51_PR")]
        public int? T_K51_PR { get; set; }

        /// <summary>
        /// Gets the value of "Regelverstoß gegen systemat. K51 Eisengehalt, Milch, Füttern".
        /// </summary>
        [Column("T_K51_RE")]
        public int? T_K51_RE { get; set; }

        /// <summary>
        /// Gets the value of "Vorsatz bei Verstoß gegen systemat. K51 Eisengehalt, Milch, Füttern".
        /// </summary>
        [Column("T_K51_VO")]
        public bool? T_K51_VO { get; set; }

        /// <summary>
        /// Gets the value of "Anzahl Kälber - K51 Eisengehalt, Milch (Füttern/Tränken und beigefügte Stoffe RL91/629)".
        /// </summary>
        [Column("T_K51_Z_KA")]
        public int? T_K51_Z_KA { get; set; }

        /// <summary>
        /// Gets the value of "Prüfer-Bewertung bei Verstoß gegen systemat. K52 Maulkorb, Füttern".
        /// </summary>
        /// <remarks>
        /// Füttern, Tränken, beigefügte Stoffe (Kälber)
        /// </remarks>
        [Column("T_K52_PR")]
        public int? T_K52_PR { get; set; }

        /// <summary>
        /// Gets the value of "Regelverstoß gegen systemat. K52 Maulkorb, Füttern".
        /// </summary>
        [Column("T_K52_RE")]
        public int? T_K52_RE { get; set; }

        /// <summary>
        /// Gets the value of "Vorsatz bei Verstoß gegen systemat. K52 Maulkorb, Füttern".
        /// </summary>
        [Column("T_K52_VO")]
        public bool? T_K52_VO { get; set; }

        /// <summary>
        /// Gets the value of "Anzahl Kälber - K52 Maulkorb (Füttern/Tränken und beigefügte Stoffe RL91/629)".
        /// </summary>
        [Column("T_K52_Z_KA")]
        public int? T_K52_Z_KA { get; set; }

        /// <summary>
        /// Gets the value of "Prüfer-Bewertung bei Verstoß gegen systemat. K53 Rauhfutter, Füttern".
        /// </summary>
        /// <remarks>
        /// Füttern, Tränken, beigefügte Stoffe (Kälber)
        /// </remarks>
        [Column("T_K53_PR")]
        public int? T_K53_PR { get; set; }

        /// <summary>
        /// Gets the value of "Regelverstoß gegen systemat. K53 Rauhfutter, Füttern".
        /// </summary>
        [Column("T_K53_RE")]
        public int? T_K53_RE { get; set; }

        /// <summary>
        /// Gets the value of "Vorsatz bei Verstoß gegen systemat. K53 Rauhfutter, Füttern".
        /// </summary>
        [Column("T_K53_VO")]
        public bool? T_K53_VO { get; set; }

        /// <summary>
        /// Gets the value of "Anzahl Kälber - K53 Rauhfutter (Füttern/Tränken und beigefügte Stoffe RL91/629)".
        /// </summary>
        [Column("T_K53_Z_KA")]
        public int? T_K53_Z_KA { get; set; }

        /// <summary>
        /// Gets the value of "Anzahl Kälber (Bestand insgesamt)".
        /// </summary>
        [Column("T_KA_BEST")]
        public int? T_KA_BEST { get; set; }

        /// <summary>
        /// Gets the value of "kontrollierte Stichprobe Kälber".
        /// </summary>
        [Column("T_KA_STICH")]
        public int? T_KA_STICH { get; set; }

        /// <summary>
        /// Gets the value of "Anzahl Kälber - L01 Zweimalige Kontrolle (Kontrolle RL91/629)".
        /// </summary>
        [Column("T_L01_FE")]
        public int? T_L01_FE { get; set; }

        /// <summary>
        /// Gets the value of "Prüfer-Bewertung bei Verstoß gegen Cross Check L01 Zweimalige Kontrolle".
        /// </summary>
        /// <remarks>
        /// Kontrolle RL91/629
        /// </remarks>
        [Column("T_L01_PR")]
        public int? T_L01_PR { get; set; }

        /// <summary>
        /// Gets the value of "Regelverstoß gegen Cross Check L01 Zweimalige Kontrolle".
        /// </summary>
        [Column("T_L01_RE")]
        public int? T_L01_RE { get; set; }

        /// <summary>
        /// Gets the value of "Vorsatz beim Verstoß gegen Cross Check L01 Zweimalige Kontrolle".
        /// </summary>
        [Column("T_L01_VO")]
        public bool? T_L01_VO { get; set; }

        /// <summary>
        /// Gets the value of "Anzahl Kälber - L02 Prüfung Anbindevorrichtung (Bewegungsfreiheit RL91/629)".
        /// </summary>
        [Column("T_L02_FE")]
        public int? T_L02_FE { get; set; }

        /// <summary>
        /// Gets the value of "Prüfer-Bewertung bei Verstoß gegen Cross Check L02 Anbindevorrichtung".
        /// </summary>
        /// <remarks>
        /// Bewegungsfreiheit RL91/629
        /// </remarks>
        [Column("T_L02_PR")]
        public int? T_L02_PR { get; set; }

        /// <summary>
        /// Gets the value of "Regelverstoß gegen Cross Check L02 Anbindevorrichtung".
        /// </summary>
        [Column("T_L02_RE")]
        public int? T_L02_RE { get; set; }

        /// <summary>
        /// Gets the value of "Vorsatz beim Verstoß gegen Cross Check L02 Anbindevorrichtung".
        /// </summary>
        [Column("T_L02_VO")]
        public bool? T_L02_VO { get; set; }

        /// <summary>
        /// Gets the value of "Anzahl Kälber - L03 Lichtstärke (Gebäude RL91/629)".
        /// </summary>
        [Column("T_L03_FE")]
        public int? T_L03_FE { get; set; }

        /// <summary>
        /// Gets the value of "Prüfer-Bewertung bei Verstoß gegen Cross Check L03 Lichtstärke".
        /// </summary>
        /// <remarks>
        /// Gebäude RL91/629
        /// </remarks>
        [Column("T_L03_PR")]
        public int? T_L03_PR { get; set; }

        /// <summary>
        /// Gets the value of "Regelverstoß gegen Cross Check L03 Lichtstärke".
        /// </summary>
        [Column("T_L03_RE")]
        public int? T_L03_RE { get; set; }

        /// <summary>
        /// Gets the value of "Vorsatz beim Verstoß gegen Cross Check L03 Lichtstärke".
        /// </summary>
        [Column("T_L03_VO")]
        public bool? T_L03_VO { get; set; }

        /// <summary>
        /// Gets the value of "Anzahl Kälber - L04 Sauberkeit, Haltungseinrichtungen (Gebäude RL91/629)".
        /// </summary>
        [Column("T_L04_FE")]
        public int? T_L04_FE { get; set; }

        /// <summary>
        /// Gets the value of "Prüfer-Bewertung bei Verstoß gegen Cross Check L04 Sauberkeit".
        /// </summary>
        [Column("T_L04_PR")]
        public int? T_L04_PR { get; set; }

        /// <summary>
        /// Gets the value of "Regelverstoß gegen Cross Check L04 Sauberkeit".
        /// </summary>
        [Column("T_L04_RE")]
        public int? T_L04_RE { get; set; }

        /// <summary>
        /// Gets the value of "Vorsatz beim Verstoß gegen Cross Check L04 Sauberkeit".
        /// </summary>
        [Column("T_L04_VO")]
        public bool? T_L04_VO { get; set; }

        /// <summary>
        /// Gets the value of "Anzahl Kälber - L05 Vorsorge im Fall einer Betriebsstörung (Kontrolle RL91/629)".
        /// </summary>
        [Column("T_L05_FE")]
        public int? T_L05_FE { get; set; }

        /// <summary>
        /// Gets the value of "Prüfer-Bewertung bei Verstoß gegen Cross Check L05 Vorsorge bei einer Betriebsstörung".
        /// </summary>
        [Column("T_L05_PR")]
        public int? T_L05_PR { get; set; }

        /// <summary>
        /// Gets the value of "Regelverstoß gegen Cross Check L05 Vorsorge im Fall einer Betriebsstörung".
        /// </summary>
        [Column("T_L05_RE")]
        public int? T_L05_RE { get; set; }

        /// <summary>
        /// Gets the value of "Vorsatz beim Verstoß gegen Cross Check L05 Vorsorge im Fall einer Betriebsstörung".
        /// </summary>
        [Column("T_L05_VO")]
        public bool? T_L05_VO { get; set; }

        /// <summary>
        /// Gets the value of "Anzahl Kälber - L06 Fütterung/Rauhfutter (Füttern/Tränken und beigefügte Stoffe, Kälber)".
        /// </summary>
        [Column("T_L06_FE")]
        public int? T_L06_FE { get; set; }

        /// <summary>
        /// Gets the value of "Prüfer-Bewertung bei Verstoß gegen Cross Check L06 Fütterung/Rauhfutter".
        /// </summary>
        /// <remarks>
        /// Füttern/Tränken und beigefügte Stoffe (Kälber)
        /// </remarks>
        [Column("T_L06_PR")]
        public int? T_L06_PR { get; set; }

        /// <summary>
        /// Gets the value of "Regelverstoß gegen Cross Check L06 Fütterung/Rauhfutter".
        /// </summary>
        [Column("T_L06_RE")]
        public int? T_L06_RE { get; set; }

        /// <summary>
        /// Gets the value of "Vorsatz beim Verstoß gegen Cross Check L06 Fütterung/Rauhfutter".
        /// </summary>
        [Column("T_L06_VO")]
        public bool? T_L06_VO { get; set; }

        /// <summary>
        /// Gets the value of "Anzahl Kälber - L07 Tier-Fressplatz-Verhältnis (Füttern/Tränken und beigefügte Stoffe RL91/629)".
        /// </summary>
        [Column("T_L07_FE")]
        public int? T_L07_FE { get; set; }

        /// <summary>
        /// Gets the value of "Prüfer-Bewertung bei Verstoß gegen Cross Check L07 Tier-Fressplatz-Verhältnis".
        /// </summary>
        [Column("T_L07_PR")]
        public int? T_L07_PR { get; set; }

        /// <summary>
        /// Gets the value of "Regelverstoß gegen Cross Check L07 Tier-Fressplatz-Verhältnis".
        /// </summary>
        [Column("T_L07_RE")]
        public int? T_L07_RE { get; set; }

        /// <summary>
        /// Gets the value of "Vorsatz beim Verstoß gegen Cross Check L07 Tier-Fressplatz-Verhältnis".
        /// </summary>
        [Column("T_L07_VO")]
        public bool? T_L07_VO { get; set; }

        /// <summary>
        /// Gets the value of "Anzahl Kälber - L08 Kolostrum (Füttern/Tränken und beigefügte Stoffe RL91/629)".
        /// </summary>
        [Column("T_L08_FE")]
        public int? T_L08_FE { get; set; }

        /// <summary>
        /// Gets the value of "Prüfer-Bewertung bei Verstoß gegen Cross Check L08 Kolostrum".
        /// </summary>
        [Column("T_L08_PR")]
        public int? T_L08_PR { get; set; }

        /// <summary>
        /// Gets the value of "Regelverstoß gegen Cross Check L08 Kolostrum".
        /// </summary>
        [Column("T_L08_RE")]
        public int? T_L08_RE { get; set; }

        /// <summary>
        /// Gets the value of "Vorsatz beim Verstoß gegen Cross Check L08 Kolostrum".
        /// </summary>
        [Column("T_L08_VO")]
        public bool? T_L08_VO { get; set; }

        /// <summary>
        /// Gets the value of "Anzahl Kälber - L09 Wasserversorgung (Füttern/Tränken und beigefügte Stoffe RL91/629)".
        /// </summary>
        [Column("T_L09_FE")]
        public int? T_L09_FE { get; set; }

        /// <summary>
        /// Gets the value of "Prüfer-Bewertung bei Verstoß gegen Cross Check L09 Wasserversorgung".
        /// </summary>
        [Column("T_L09_PR")]
        public int? T_L09_PR { get; set; }

        /// <summary>
        /// Gets the value of "Regelverstoß gegen Cross Check L09 Wasserversorgung".
        /// </summary>
        [Column("T_L09_RE")]
        public int? T_L09_RE { get; set; }

        /// <summary>
        /// Gets the value of "Vorsatz beim Verstoß gegen Cross Check L09 Wasserversorgung".
        /// </summary>
        [Column("T_L09_VO")]
        public bool? T_L09_VO { get; set; }

        /// <summary>
        /// Gets the value of "Kontrolle auf Basis Gesamtbestand oder Stichprobe".
        /// </summary>
        /// <remarks>
        /// 0=Gesamtbestand, 1=Stichprobe, 2=teils, teils
        /// </remarks>
        [Column("T_STICHP")]
        public int? T_STICHP { get; set; }

        /// <summary>
        /// Gets the value of "Zuordnungstyp, aus der 1.Zuordnung".
        /// </summary>
        /// <remarks>
        /// Typ der Betriebszuordnung auf 1.Hierarchiestufe, i.d.R. 1, 5 oder 16
        /// </remarks>
        [Column("TYP_ZUO_P1")]
        public int? TYP_ZUO_P1 { get; set; }

        /// <summary>
        /// Gets the value of "Zuordnungstyp, aus der 2.Zuordnung".
        /// </summary>
        /// <remarks>
        /// Typ der Betriebszuordnung auf 2.Hierarchiestufe, i.d.R. 5 oder 16
        /// </remarks>
        [Column("TYP_ZUO_P2")]
        public int? TYP_ZUO_P2 { get; set; }

        /// <summary>
        /// Gets the value of "Zuordnungstyp, aus der 3.Zuordnung".
        /// </summary>
        /// <remarks>
        /// Typ der Betriebszuordnung auf 3.Hierarchiestufe, i.d.R. 16
        /// </remarks>
        [Column("TYP_ZUO_P3")]
        public int? TYP_ZUO_P3 { get; set; }

        /// <summary>
        /// Gets the value of "Gesamtbewertung Fahrlässigkeit der geprüften Rechtsakte".
        /// </summary>
        [Column("VERST_GES")]
        public int? VERST_GES { get; set; }

        /// <summary>
        /// Gets the value of "Prozentsatz Sanktionierung Fahrlässig + ggf. Vorsatz (ganzzahlig)".
        /// </summary>
        [Column("VERST_SUM")]
        public int? VERST_SUM { get; set; }

        /// <summary>
        /// Gets the value of "Systembewertung Fahrlässigkeit der geprüften Rechtsakte".
        /// </summary>
        [Column("VERST_SYS")]
        public int? VERST_SYS { get; set; }

        /// <summary>
        /// Gets the value of "Verstoß gegen den Standard / Rechtsakt - ja/nein".
        /// </summary>
        [Column("VERSTOSS")]
        public bool? VERSTOSS { get; set; }

        /// <summary>
        /// Gets the value of "VOK Ankündigung".
        /// </summary>
        /// <remarks>
        /// Art der Ankündigung bei Vor-Ort-Kontrolle
        /// </remarks>
        [Column("VOK_ANKD")]
        public int? VOK_ANKD { get; set; }

        /// <summary>
        /// Gets the value of "VOK Datum".
        /// </summary>
        /// <remarks>
        /// Datum der Vor-Ort-Kontrolle
        /// </remarks>
        [Column("VOK_DAT")]
        public DateOnly? VOK_DAT { get; set; }

        /// <summary>
        /// Gets the value of "VOK durchgeführt oder nicht".
        /// </summary>
        /// <remarks>
        /// VOK durchgeführt oder Grund wenn nicht
        /// </remarks>
        [Column("VOK_DURCH")]
        public int? VOK_DURCH { get; set; }

        /// <summary>
        /// Gets the value of "Datum des fachlichen Abschlusses der Prüfung".
        /// </summary>
        [Column("VOK_ENDDAT")]
        public DateOnly? VOK_ENDDAT { get; set; }

        /// <summary>
        /// Gets the value of "VOK gestattet".
        /// </summary>
        /// <remarks>
        /// Wurde Vor-Ort-Kontrolle gestattet
        /// </remarks>
        [Column("VOK_GEST")]
        public int? VOK_GEST { get; set; }

        /// <summary>
        /// Gets the value of "Weitere Kontrollen (Cross.Checks) durchgeführt".
        /// </summary>
        [Column("VOK_WEI_KO")]
        public bool? VOK_WEI_KO { get; set; }

        /// <summary>
        /// Gets the value of "Prozentsatz Sanktionierung wenn Vorsatz vorliegt (ganzzahlig)".
        /// </summary>
        [Column("VORS_GES")]
        public int? VORS_GES { get; set; }

        /// <summary>
        /// Gets the value of "Zuordnungsstufe".
        /// </summary>
        /// <remarks>
        /// Anzahl der Stufen (von 1..3)
        /// </remarks>
        [Column("ZUO_STUFE")]
        public int? ZUO_STUFE { get; set; }

        /// <summary>
        /// Gets or sets the value of "Verstoßfeststellungen an kontrollierten Betrieb versendet/übergeben".
        /// </summary>
        [Column("FEST_VERS")]
        [Required]
        public bool? FEST_VERS { get; set; }

        /// <summary>
        /// Gets or sets the value of "Versand/Übergabedatum der Verstoßfeststellungen an kontrollierten Betrieb".
        /// </summary>
        [Column("VERS_DAT")]
        public DateOnly? VERS_DAT { get; set; }

        /// <summary>
        /// Gets or sets the value of "Datum der Vorankündigung der Kontrolle".
        /// </summary>
        [Column("VOK_ADAT")]
        public DateOnly? VOK_ADAT { get; set; }

        /// <summary>
        /// Gets or sets the value of "bei VOK anwesende Auskunftsperson".
        /// </summary>
        [Column("VOK_APERS")]
        public string? VOK_APERS { get; set; }

        /// <summary>
        /// Gets or sets the value of "Informtion bei VOK mit Unterschrift belegt".
        /// </summary>
        [Column("VOK_INFO")]
        [Required]
        public bool? VOK_INFO { get; set; }

        /// <summary>
        /// Gets or sets the value of "VOK Prüfer".
        /// </summary>
        /// <remarks>
        /// Prüfende Person (Mitbenutzeridentifikation)
        /// </remarks>
        [Column("VOK_PERS")]
        public string? VOK_PERS { get; set; }

        /// <summary>
        /// Gets or sets the value of "VOK Datum der Hauptkontrolle".
        /// </summary>
        /// <remarks>
        /// diese Kontrolle ist zwar an anderem Datum durchgeführt, gehört aber zusammen zu einer Kontrolle vom Hauptdatum
        /// </remarks>
        [Column("VOK_DATX")]
        public DateOnly? VOK_DATX { get; set; }

        /// <summary>
        /// Gets or sets the value of "VOK Datum der Retro-Feststellung".
        /// </summary>
        [Column("VOK_DATRET")]
        public DateOnly? VOK_DATRET { get; set; }

    }
}
